# Source: https://github.com/kanton-bern/hellodata-be/tree/443c6c849b4232578970abb5ef4dbab8307ca6a7/hello-data-subsystems/hello-data-dbt-docs/src/main/resources/application.yaml
# Sourcegraph query: "context:global (lang:yaml OR lang:Java Properties) file:resources/application.(yaml|properties)"
#
# Copyright Â© 2024, Kanton Bern
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

hello-data:
  #    code: 'type | key | name'
  business-context: 'Business Domain | HelloDATA_Product_Development | HelloDATA Product Development'
  files:
    static-location: /storage
    scan-interval-seconds: 30
    static-location-to-omit: /storage/tmp #can be comma separated: /storage/tmp,/storage/dags etc.
  auth-server:
    url: http://localhost:38080
    realm: hellodata
    client-id: frontend-client
  default-admin:
    email: admin@hellodata.ch
    username: admin
    password: admin
    first-name: HelloDATA
    last-name: Admin
  update-roles-interval: 60
  cors:
    allowed-origins: http://localhost:8080,http://localhost:4200 #can be comma separated

spring:
  application:
    name: Hello-Data Docs
  datasource:
    url: jdbc:postgresql://localhost:5432/hd_dbt_docs
    username: airflow
    password: airflow
    driver-class-name: org.postgresql.Driver
  jpa:
    properties:
      hibernate:
        generate_statistics: true
  web:
    resources:
      static-locations: file:${hello-data.files.static-location}, classpath:/static/
  thymeleaf:
    cache: false
  cache:
    cache-names: project-docs
  boot:
    admin:
      client:
        url: http://localhost:9090
        username: "user"       #These two are needed so that the client
        password: "password"   #can register at the protected server api
  #        instance:
  #          metadata:
  #            user.name: "user"         #These two are needed so that the server
  #            user.password: "password" #can access the protected client endpoints
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: ${hello-data.auth-server.client-id}
            authorization-grant-type: authorization_code
            scope:
              - openid
        provider:
          keycloak:
            issuer-uri: ${hello-data.auth-server.url}/realms/${hello-data.auth-server.realm}
            user-name-attribute: preferred_username
      resourceserver:
        jwt:
          issuer-uri: ${hello-data.auth-server.url}/realms/${hello-data.auth-server.realm}

management:
  endpoint:
    health:
      enabled: true
    #      show-details: always #if we need some details
    info:
      enabled: true
  endpoints:
    web:
      exposure:
        include: info, health
  health:
    nats:
      enabled: false
    mail:
      enabled: false
    kubernetes:
      enabled: false
    ldap:
      enabled: false # Disable this when not using ldap connection
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true
    kubernetes:
      enabled: false
  metrics:
    distribution:
      percentiles-histogram:
        spring.data.repository.invocations: true
        http.server.requests: true
logging:
  level:
    org.hibernate.engine.internal.StatisticalLoggingSessionEventListener: WARN # Auf INFO werden hier sehr viele Informationen gelogged.
#logging:
#  level:
#    org.springframework: TRACE
server:
  port: 8086
  servlet:
    context-path: /dbt-docs
  error:
    include-message: always
    include-exception: false
    include-stacktrace: never
  max-http-request-header-size: 32KB
springdoc:
  show-actuator: true
  packagesToScan: ch.bedag.dap.hellodata.docs
  paths-to-match: /**
  swagger-ui:
    enabled: true
    oauth:
      clientId: ${hello-data.auth-server.client-id}
